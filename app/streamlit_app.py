import streamlit as st
import pandas as pd
import joblib

st.title("QSAR Drug Repurposing App")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ df_repurposing.xlsx", type=["xlsx"])
if uploaded_file is not None:
    df = pd.read_excel(uploaded_file)
    st.write("–ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", df.head())

    # –£–¥–∞–ª–∏–º –º–µ—Ç–∞- –∏ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    meta_cols = ['ChEMBL_ID', 'ROMol', 'Name', 'Indication', 'canonical_smiles']
    columns_to_keep = [col for col in df.columns if col not in meta_cols and pd.api.types.is_numeric_dtype(df[col])]
    X = df[columns_to_keep]

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    recall_pipeline = joblib.load("models/recall_screening.pkl")
    precision_pipeline = joblib.load("models/precision_screening.pkl")

    # –≠—Ç–∞–ø 1: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    recall_preds = recall_pipeline.predict(X)
    df['KRAS_G12D_activity'] = recall_preds
    st.write("üß™ –≠—Ç–∞–ø 1: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (recall screening)")
    st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–ª–µ–∫—É–ª:", (df['KRAS_G12D_activity'] == 1).sum())
    st.dataframe(df[df['KRAS_G12D_activity'] == 1].head())

    # –≠—Ç–∞–ø 2: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    active_df = df[df['KRAS_G12D_activity'] == 1]
    if not active_df.empty:
        X_active = X.loc[active_df.index]
        kras_preds = precision_pipeline.predict(X_active)

        # –ó–∞–ø–∏—Å—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        df.loc[active_df.index, 'KRAS_specificity'] = kras_preds
        st.success("‚úÖ –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à—ë–Ω: KRAS —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        st.write("üß¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏ (precision screening)")
        st.dataframe(df.loc[active_df.index, ['KRAS_G12D_activity', 'KRAS_specificity']].head())

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        import io
        from pandas import ExcelWriter
        buffer = io.BytesIO()
        with ExcelWriter(buffer, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='Predictions')
            writer.save()
        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Excel)",
            data=buffer,
            file_name="results.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.warning("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–ª–µ–∫—É–ª ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø 2.")
